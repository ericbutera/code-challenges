// Code generated by mockery v2.47.0. DO NOT EDIT.

package db

import (
	models "github.com/ericbutera/project/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// MockDB is an autogenerated mock type for the DB type
type MockDB struct {
	mock.Mock
}

type MockDB_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDB) EXPECT() *MockDB_Expecter {
	return &MockDB_Expecter{mock: &_m.Mock}
}

// GetLatestReadingByDevice provides a mock function with given fields: deviceID
func (_m *MockDB) GetLatestReadingByDevice(deviceID string) (*DeviceLatestReading, error) {
	ret := _m.Called(deviceID)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestReadingByDevice")
	}

	var r0 *DeviceLatestReading
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*DeviceLatestReading, error)); ok {
		return rf(deviceID)
	}
	if rf, ok := ret.Get(0).(func(string) *DeviceLatestReading); ok {
		r0 = rf(deviceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DeviceLatestReading)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(deviceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDB_GetLatestReadingByDevice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestReadingByDevice'
type MockDB_GetLatestReadingByDevice_Call struct {
	*mock.Call
}

// GetLatestReadingByDevice is a helper method to define mock.On call
//   - deviceID string
func (_e *MockDB_Expecter) GetLatestReadingByDevice(deviceID interface{}) *MockDB_GetLatestReadingByDevice_Call {
	return &MockDB_GetLatestReadingByDevice_Call{Call: _e.mock.On("GetLatestReadingByDevice", deviceID)}
}

func (_c *MockDB_GetLatestReadingByDevice_Call) Run(run func(deviceID string)) *MockDB_GetLatestReadingByDevice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDB_GetLatestReadingByDevice_Call) Return(_a0 *DeviceLatestReading, _a1 error) *MockDB_GetLatestReadingByDevice_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDB_GetLatestReadingByDevice_Call) RunAndReturn(run func(string) (*DeviceLatestReading, error)) *MockDB_GetLatestReadingByDevice_Call {
	_c.Call.Return(run)
	return _c
}

// GetReadingCountByDevice provides a mock function with given fields: deviceID
func (_m *MockDB) GetReadingCountByDevice(deviceID string) (*DeviceReadingsCount, error) {
	ret := _m.Called(deviceID)

	if len(ret) == 0 {
		panic("no return value specified for GetReadingCountByDevice")
	}

	var r0 *DeviceReadingsCount
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*DeviceReadingsCount, error)); ok {
		return rf(deviceID)
	}
	if rf, ok := ret.Get(0).(func(string) *DeviceReadingsCount); ok {
		r0 = rf(deviceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DeviceReadingsCount)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(deviceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDB_GetReadingCountByDevice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReadingCountByDevice'
type MockDB_GetReadingCountByDevice_Call struct {
	*mock.Call
}

// GetReadingCountByDevice is a helper method to define mock.On call
//   - deviceID string
func (_e *MockDB_Expecter) GetReadingCountByDevice(deviceID interface{}) *MockDB_GetReadingCountByDevice_Call {
	return &MockDB_GetReadingCountByDevice_Call{Call: _e.mock.On("GetReadingCountByDevice", deviceID)}
}

func (_c *MockDB_GetReadingCountByDevice_Call) Run(run func(deviceID string)) *MockDB_GetReadingCountByDevice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDB_GetReadingCountByDevice_Call) Return(_a0 *DeviceReadingsCount, _a1 error) *MockDB_GetReadingCountByDevice_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDB_GetReadingCountByDevice_Call) RunAndReturn(run func(string) (*DeviceReadingsCount, error)) *MockDB_GetReadingCountByDevice_Call {
	_c.Call.Return(run)
	return _c
}

// GetReadingsByDevice provides a mock function with given fields: deviceID
func (_m *MockDB) GetReadingsByDevice(deviceID string) ([]models.Reading, error) {
	ret := _m.Called(deviceID)

	if len(ret) == 0 {
		panic("no return value specified for GetReadingsByDevice")
	}

	var r0 []models.Reading
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]models.Reading, error)); ok {
		return rf(deviceID)
	}
	if rf, ok := ret.Get(0).(func(string) []models.Reading); ok {
		r0 = rf(deviceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Reading)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(deviceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDB_GetReadingsByDevice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReadingsByDevice'
type MockDB_GetReadingsByDevice_Call struct {
	*mock.Call
}

// GetReadingsByDevice is a helper method to define mock.On call
//   - deviceID string
func (_e *MockDB_Expecter) GetReadingsByDevice(deviceID interface{}) *MockDB_GetReadingsByDevice_Call {
	return &MockDB_GetReadingsByDevice_Call{Call: _e.mock.On("GetReadingsByDevice", deviceID)}
}

func (_c *MockDB_GetReadingsByDevice_Call) Run(run func(deviceID string)) *MockDB_GetReadingsByDevice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDB_GetReadingsByDevice_Call) Return(_a0 []models.Reading, _a1 error) *MockDB_GetReadingsByDevice_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDB_GetReadingsByDevice_Call) RunAndReturn(run func(string) ([]models.Reading, error)) *MockDB_GetReadingsByDevice_Call {
	_c.Call.Return(run)
	return _c
}

// StoreDeviceReadings provides a mock function with given fields: deviceID, readings
func (_m *MockDB) StoreDeviceReadings(deviceID string, readings []*models.Reading) (*StoreDeviceReadingsResult, error) {
	ret := _m.Called(deviceID, readings)

	if len(ret) == 0 {
		panic("no return value specified for StoreDeviceReadings")
	}

	var r0 *StoreDeviceReadingsResult
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []*models.Reading) (*StoreDeviceReadingsResult, error)); ok {
		return rf(deviceID, readings)
	}
	if rf, ok := ret.Get(0).(func(string, []*models.Reading) *StoreDeviceReadingsResult); ok {
		r0 = rf(deviceID, readings)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StoreDeviceReadingsResult)
		}
	}

	if rf, ok := ret.Get(1).(func(string, []*models.Reading) error); ok {
		r1 = rf(deviceID, readings)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDB_StoreDeviceReadings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoreDeviceReadings'
type MockDB_StoreDeviceReadings_Call struct {
	*mock.Call
}

// StoreDeviceReadings is a helper method to define mock.On call
//   - deviceID string
//   - readings []*models.Reading
func (_e *MockDB_Expecter) StoreDeviceReadings(deviceID interface{}, readings interface{}) *MockDB_StoreDeviceReadings_Call {
	return &MockDB_StoreDeviceReadings_Call{Call: _e.mock.On("StoreDeviceReadings", deviceID, readings)}
}

func (_c *MockDB_StoreDeviceReadings_Call) Run(run func(deviceID string, readings []*models.Reading)) *MockDB_StoreDeviceReadings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]*models.Reading))
	})
	return _c
}

func (_c *MockDB_StoreDeviceReadings_Call) Return(_a0 *StoreDeviceReadingsResult, _a1 error) *MockDB_StoreDeviceReadings_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDB_StoreDeviceReadings_Call) RunAndReturn(run func(string, []*models.Reading) (*StoreDeviceReadingsResult, error)) *MockDB_StoreDeviceReadings_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDB creates a new instance of MockDB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDB {
	mock := &MockDB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
